"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@levischuck";
exports.ids = ["vendor-chunks/@levischuck"];
exports.modules = {

/***/ "(rsc)/./node_modules/@levischuck/tiny-cbor/esm/cbor/cbor.js":
/*!*************************************************************!*\
  !*** ./node_modules/@levischuck/tiny-cbor/esm/cbor/cbor.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CBORTag: () => (/* binding */ CBORTag),\n/* harmony export */   decodeCBOR: () => (/* binding */ decodeCBOR),\n/* harmony export */   decodePartialCBOR: () => (/* binding */ decodePartialCBOR),\n/* harmony export */   encodeCBOR: () => (/* binding */ encodeCBOR)\n/* harmony export */ });\n/* harmony import */ var _cbor_internal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cbor_internal.js */ \"(rsc)/./node_modules/@levischuck/tiny-cbor/esm/cbor/cbor_internal.js\");\n\n/**\n * A value which is wrapped with a CBOR Tag.\n * Several tags are registered with defined meanings like 0 for a date string.\n * These meanings are **not interpreted** when decoded or encoded.\n *\n * This class is an immutable record.\n * If the tag number or value needs to change, then construct a new tag\n */\nclass CBORTag {\n    /**\n     * Wrap a value with a tag number.\n     * When encoded, this tag will be attached to the value.\n     *\n     * @param tag Tag number\n     * @param value Wrapped value\n     */\n    constructor(tag, value) {\n        Object.defineProperty(this, \"tagId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"tagValue\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.tagId = tag;\n        this.tagValue = value;\n    }\n    /**\n     * Read the tag number\n     */\n    get tag() {\n        return this.tagId;\n    }\n    /**\n     * Read the value\n     */\n    get value() {\n        return this.tagValue;\n    }\n}\nfunction decodeUnsignedInteger(data, argument, index) {\n    return (0,_cbor_internal_js__WEBPACK_IMPORTED_MODULE_0__.decodeLength)(data, argument, index);\n}\nfunction decodeNegativeInteger(data, argument, index) {\n    const [value, length] = decodeUnsignedInteger(data, argument, index);\n    return [-value - 1, length];\n}\nfunction decodeByteString(data, argument, index) {\n    const [lengthValue, lengthConsumed] = (0,_cbor_internal_js__WEBPACK_IMPORTED_MODULE_0__.decodeLength)(data, argument, index);\n    const dataStartIndex = index + lengthConsumed;\n    return [\n        new Uint8Array(data.buffer.slice(dataStartIndex, dataStartIndex + lengthValue)),\n        lengthConsumed + lengthValue,\n    ];\n}\nconst TEXT_DECODER = new TextDecoder();\nfunction decodeString(data, argument, index) {\n    const [value, length] = decodeByteString(data, argument, index);\n    return [TEXT_DECODER.decode(value), length];\n}\nfunction decodeArray(data, argument, index) {\n    if (argument === 0) {\n        return [[], 1];\n    }\n    const [length, lengthConsumed] = (0,_cbor_internal_js__WEBPACK_IMPORTED_MODULE_0__.decodeLength)(data, argument, index);\n    let consumedLength = lengthConsumed;\n    const value = [];\n    for (let i = 0; i < length; i++) {\n        const remainingDataLength = data.byteLength - index - consumedLength;\n        if (remainingDataLength <= 0) {\n            throw new Error(\"array is not supported or well formed\");\n        }\n        const [decodedValue, consumed] = decodeNext(data, index + consumedLength);\n        value.push(decodedValue);\n        consumedLength += consumed;\n    }\n    return [value, consumedLength];\n}\nconst MAP_ERROR = \"Map is not supported or well formed\";\nfunction decodeMap(data, argument, index) {\n    if (argument === 0) {\n        return [new Map(), 1];\n    }\n    const [length, lengthConsumed] = (0,_cbor_internal_js__WEBPACK_IMPORTED_MODULE_0__.decodeLength)(data, argument, index);\n    let consumedLength = lengthConsumed;\n    const result = new Map();\n    for (let i = 0; i < length; i++) {\n        let remainingDataLength = data.byteLength - index - consumedLength;\n        if (remainingDataLength <= 0) {\n            throw new Error(MAP_ERROR);\n        }\n        // Load key\n        const [key, keyConsumed] = decodeNext(data, index + consumedLength);\n        consumedLength += keyConsumed;\n        remainingDataLength -= keyConsumed;\n        // Check that there's enough to have a value\n        if (remainingDataLength <= 0) {\n            throw new Error(MAP_ERROR);\n        }\n        // Technically CBOR maps can have any type as the key, and so can JS Maps\n        // However, JS Maps can only reference such keys as references which would\n        // require key iteration and pattern matching.\n        // For simplicity, since such keys are not in use with WebAuthn, this\n        // capability is not implemented and the types are restricted to strings\n        // and numbers.\n        if (typeof key !== \"string\" && typeof key !== \"number\") {\n            throw new Error(MAP_ERROR);\n        }\n        // CBOR Maps are not well formed if there are duplicate keys\n        if (result.has(key)) {\n            throw new Error(MAP_ERROR);\n        }\n        // Load value\n        const [value, valueConsumed] = decodeNext(data, index + consumedLength);\n        consumedLength += valueConsumed;\n        result.set(key, value);\n    }\n    return [result, consumedLength];\n}\nfunction decodeFloat16(data, index) {\n    if (index + 3 > data.byteLength) {\n        throw new Error(\"CBOR stream ended before end of Float 16\");\n    }\n    // Skip the first byte\n    const result = data.getUint16(index + 1, false);\n    // A minimal selection of supported values\n    if (result == 0x7c00) {\n        return [Infinity, 3];\n    }\n    else if (result == 0x7e00) {\n        return [NaN, 3];\n    }\n    else if (result == 0xfc00) {\n        return [-Infinity, 3];\n    }\n    throw new Error(\"Float16 data is unsupported\");\n}\nfunction decodeFloat32(data, index) {\n    if (index + 5 > data.byteLength) {\n        throw new Error(\"CBOR stream ended before end of Float 32\");\n    }\n    // Skip the first byte\n    const result = data.getFloat32(index + 1, false);\n    // First byte + 4 byte float\n    return [result, 5];\n}\nfunction decodeFloat64(data, index) {\n    if (index + 9 > data.byteLength) {\n        throw new Error(\"CBOR stream ended before end of Float 64\");\n    }\n    // Skip the first byte\n    const result = data.getFloat64(index + 1, false);\n    // First byte + 8 byte float\n    return [result, 9];\n}\nfunction decodeTag(data, argument, index) {\n    const [tag, tagBytes] = (0,_cbor_internal_js__WEBPACK_IMPORTED_MODULE_0__.decodeLength)(data, argument, index);\n    const [value, valueBytes] = decodeNext(data, index + tagBytes);\n    return [new CBORTag(tag, value), tagBytes + valueBytes];\n}\nfunction decodeNext(data, index) {\n    if (index >= data.byteLength) {\n        throw new Error(\"CBOR stream ended before tag value\");\n    }\n    const byte = data.getUint8(index);\n    const majorType = byte >> 5;\n    const argument = byte & 0x1f;\n    switch (majorType) {\n        case _cbor_internal_js__WEBPACK_IMPORTED_MODULE_0__.MAJOR_TYPE_UNSIGNED_INTEGER: {\n            return decodeUnsignedInteger(data, argument, index);\n        }\n        case _cbor_internal_js__WEBPACK_IMPORTED_MODULE_0__.MAJOR_TYPE_NEGATIVE_INTEGER: {\n            return decodeNegativeInteger(data, argument, index);\n        }\n        case _cbor_internal_js__WEBPACK_IMPORTED_MODULE_0__.MAJOR_TYPE_BYTE_STRING: {\n            return decodeByteString(data, argument, index);\n        }\n        case _cbor_internal_js__WEBPACK_IMPORTED_MODULE_0__.MAJOR_TYPE_TEXT_STRING: {\n            return decodeString(data, argument, index);\n        }\n        case _cbor_internal_js__WEBPACK_IMPORTED_MODULE_0__.MAJOR_TYPE_ARRAY: {\n            return decodeArray(data, argument, index);\n        }\n        case _cbor_internal_js__WEBPACK_IMPORTED_MODULE_0__.MAJOR_TYPE_MAP: {\n            return decodeMap(data, argument, index);\n        }\n        case _cbor_internal_js__WEBPACK_IMPORTED_MODULE_0__.MAJOR_TYPE_TAG: {\n            return decodeTag(data, argument, index);\n        }\n        case _cbor_internal_js__WEBPACK_IMPORTED_MODULE_0__.MAJOR_TYPE_SIMPLE_OR_FLOAT: {\n            switch (argument) {\n                case 20:\n                    return [false, 1];\n                case 21:\n                    return [true, 1];\n                case 22:\n                    return [null, 1];\n                case 23:\n                    return [undefined, 1];\n                // 24: Simple value (value 32..255 in following byte)\n                case 25: // IEEE 754 Half-Precision Float (16 bits follow)\n                    return decodeFloat16(data, index);\n                case 26: // IEEE 754 Single-Precision Float (32 bits follow)\n                    return decodeFloat32(data, index);\n                case 27: // IEEE 754 Double-Precision Float (64 bits follow)\n                    return decodeFloat64(data, index);\n                // 28-30: Reserved, not well-formed in the present document\n                // 31: \"break\" stop code for indefinite-length items\n            }\n        }\n    }\n    throw new Error(`Unsupported or not well formed at ${index}`);\n}\nfunction encodeSimple(data) {\n    if (data === true) {\n        return 0xf5;\n    }\n    else if (data === false) {\n        return 0xf4;\n    }\n    else if (data === null) {\n        return 0xf6;\n    }\n    // Else undefined\n    return 0xf7;\n}\nfunction encodeFloat(data) {\n    if (Math.fround(data) == data || !Number.isFinite(data) || Number.isNaN(data)) {\n        // Float32\n        const output = new Uint8Array(5);\n        output[0] = 0xfa;\n        const view = new DataView(output.buffer);\n        view.setFloat32(1, data, false);\n        return output;\n    }\n    else {\n        // Float64\n        const output = new Uint8Array(9);\n        output[0] = 0xfb;\n        const view = new DataView(output.buffer);\n        view.setFloat64(1, data, false);\n        return output;\n    }\n}\nfunction encodeNumber(data) {\n    if (typeof data == \"number\") {\n        if (Number.isSafeInteger(data)) {\n            // Encode integer\n            if (data < 0) {\n                return (0,_cbor_internal_js__WEBPACK_IMPORTED_MODULE_0__.encodeLength)(_cbor_internal_js__WEBPACK_IMPORTED_MODULE_0__.MAJOR_TYPE_NEGATIVE_INTEGER, Math.abs(data));\n            }\n            else {\n                return (0,_cbor_internal_js__WEBPACK_IMPORTED_MODULE_0__.encodeLength)(_cbor_internal_js__WEBPACK_IMPORTED_MODULE_0__.MAJOR_TYPE_UNSIGNED_INTEGER, data);\n            }\n        }\n        return [encodeFloat(data)];\n    }\n    else {\n        if (data < 0n) {\n            return (0,_cbor_internal_js__WEBPACK_IMPORTED_MODULE_0__.encodeLength)(_cbor_internal_js__WEBPACK_IMPORTED_MODULE_0__.MAJOR_TYPE_NEGATIVE_INTEGER, data * -1n);\n        }\n        else {\n            return (0,_cbor_internal_js__WEBPACK_IMPORTED_MODULE_0__.encodeLength)(_cbor_internal_js__WEBPACK_IMPORTED_MODULE_0__.MAJOR_TYPE_UNSIGNED_INTEGER, data);\n        }\n    }\n}\nconst ENCODER = new TextEncoder();\nfunction encodeString(data, output) {\n    output.push(...(0,_cbor_internal_js__WEBPACK_IMPORTED_MODULE_0__.encodeLength)(_cbor_internal_js__WEBPACK_IMPORTED_MODULE_0__.MAJOR_TYPE_TEXT_STRING, data.length));\n    output.push(ENCODER.encode(data));\n}\nfunction encodeBytes(data, output) {\n    output.push(...(0,_cbor_internal_js__WEBPACK_IMPORTED_MODULE_0__.encodeLength)(_cbor_internal_js__WEBPACK_IMPORTED_MODULE_0__.MAJOR_TYPE_BYTE_STRING, data.length));\n    output.push(data);\n}\nfunction encodeArray(data, output) {\n    output.push(...(0,_cbor_internal_js__WEBPACK_IMPORTED_MODULE_0__.encodeLength)(_cbor_internal_js__WEBPACK_IMPORTED_MODULE_0__.MAJOR_TYPE_ARRAY, data.length));\n    for (const element of data) {\n        encodePartialCBOR(element, output);\n    }\n}\nfunction encodeMap(data, output) {\n    output.push(new Uint8Array((0,_cbor_internal_js__WEBPACK_IMPORTED_MODULE_0__.encodeLength)(_cbor_internal_js__WEBPACK_IMPORTED_MODULE_0__.MAJOR_TYPE_MAP, data.size)));\n    for (const [key, value] of data.entries()) {\n        encodePartialCBOR(key, output);\n        encodePartialCBOR(value, output);\n    }\n}\nfunction encodeTag(tag, output) {\n    output.push(...(0,_cbor_internal_js__WEBPACK_IMPORTED_MODULE_0__.encodeLength)(_cbor_internal_js__WEBPACK_IMPORTED_MODULE_0__.MAJOR_TYPE_TAG, tag.tag));\n    encodePartialCBOR(tag.value, output);\n}\nfunction encodePartialCBOR(data, output) {\n    if (typeof data == \"boolean\" || data === null || data == undefined) {\n        output.push(encodeSimple(data));\n        return;\n    }\n    if (typeof data == \"number\" || typeof data == \"bigint\") {\n        output.push(...encodeNumber(data));\n        return;\n    }\n    if (typeof data == \"string\") {\n        encodeString(data, output);\n        return;\n    }\n    if (data instanceof Uint8Array) {\n        encodeBytes(data, output);\n        return;\n    }\n    if (Array.isArray(data)) {\n        encodeArray(data, output);\n        return;\n    }\n    if (data instanceof Map) {\n        encodeMap(data, output);\n        return;\n    }\n    if (data instanceof CBORTag) {\n        encodeTag(data, output);\n        return;\n    }\n    throw new Error(\"Not implemented\");\n}\n/**\n * Like {decodeCBOR}, but the length of the data is unknown and there is likely\n * more -- possibly unrelated non-CBOR -- data afterwards.\n *\n * Examples:\n *\n * ```ts\n * import {decodePartialCBOR} from './cbor.ts'\n * decodePartialCBOR(new Uint8Array([1, 2, 245, 3, 4]), 2)\n * // returns [true, 1]\n * // It did not decode the leading [1, 2] or trailing [3, 4]\n * ```\n *\n * @param data a data stream to read data from\n * @param index where to start reading in the data stream\n * @returns a tuple of the value followed by bytes read.\n * @throws {Error}\n *   When the data stream ends early or the CBOR data is not well formed\n */\nfunction decodePartialCBOR(data, index) {\n    if (data.byteLength === 0 || data.byteLength <= index || index < 0) {\n        throw new Error(\"No data\");\n    }\n    if (data instanceof Uint8Array) {\n        return decodeNext(new DataView(data.buffer), index);\n    }\n    else if (data instanceof ArrayBuffer) {\n        return decodeNext(new DataView(data), index);\n    }\n    // otherwise, it is a data view\n    return decodeNext(data, index);\n}\n/**\n * Decode CBOR data from a binary stream\n *\n * The entire data stream from [0, length) will be consumed.\n * If you require a partial decoding, see {decodePartialCBOR}.\n *\n * Examples:\n *\n * ```ts\n * import {decodeCBOR, CBORTag, CBORType} from './cbor.ts'\n * decodeCBOR(new Uint8Array([162, 99, 107, 101, 121, 101, 118, 97, 108, 117, 101, 1, 109, 97, 110, 111, 116, 104, 101, 114, 32, 118, 97, 108, 117, 101]));\n * // returns new Map<string | number, CBORType>([\n * //   [\"key\", \"value\"],\n * //   [1, \"another value\"]\n * // ]);\n *\n * const taggedItem = new Uint8Array([217, 4, 210, 101, 104, 101, 108, 108, 111]);\n * decodeCBOR(new DataView(taggedItem.buffer))\n * // returns new CBORTag(1234, \"hello\")\n * ```\n *\n * @param data a data stream, multiple types are supported\n * @returns\n */\nfunction decodeCBOR(data) {\n    const [value, length] = decodePartialCBOR(data, 0);\n    if (length !== data.byteLength) {\n        throw new Error(`Data was decoded, but the whole stream was not processed ${length} != ${data.byteLength}`);\n    }\n    return value;\n}\n/**\n * Encode a supported structure to a CBOR byte string.\n *\n * Example:\n *\n * ```ts\n * import {encodeCBOR, CBORType, CBORTag} from './cbor.ts'\n * encodeCBOR(new Map<string | number, CBORType>([\n *   [\"key\", \"value\"],\n *   [1, \"another value\"]\n * ]));\n * // returns new Uint8Array([162, 99, 107, 101, 121, 101, 118, 97, 108, 117, 101, 1, 109, 97, 110, 111, 116, 104, 101, 114, 32 118, 97, 108, 117, 101])\n *\n * encodeCBOR(new CBORTag(1234, \"hello\"))\n * // returns new UInt8Array([217, 4, 210, 101, 104, 101, 108, 108, 111])\n * ```\n *\n * @param data Data to encode\n * @returns A byte string as a Uint8Array\n * @throws Error\n *   if unsupported data is found during encoding\n */\nfunction encodeCBOR(data) {\n    const results = [];\n    encodePartialCBOR(data, results);\n    let length = 0;\n    for (const result of results) {\n        if (typeof result == \"number\") {\n            length += 1;\n        }\n        else {\n            length += result.length;\n        }\n    }\n    const output = new Uint8Array(length);\n    let index = 0;\n    for (const result of results) {\n        if (typeof result == \"number\") {\n            output[index] = result;\n            index += 1;\n        }\n        else {\n            output.set(result, index);\n            index += result.length;\n        }\n    }\n    return output;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@levischuck/tiny-cbor/esm/cbor/cbor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@levischuck/tiny-cbor/esm/cbor/cbor_internal.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@levischuck/tiny-cbor/esm/cbor/cbor_internal.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MAJOR_TYPE_ARRAY: () => (/* binding */ MAJOR_TYPE_ARRAY),\n/* harmony export */   MAJOR_TYPE_BYTE_STRING: () => (/* binding */ MAJOR_TYPE_BYTE_STRING),\n/* harmony export */   MAJOR_TYPE_MAP: () => (/* binding */ MAJOR_TYPE_MAP),\n/* harmony export */   MAJOR_TYPE_NEGATIVE_INTEGER: () => (/* binding */ MAJOR_TYPE_NEGATIVE_INTEGER),\n/* harmony export */   MAJOR_TYPE_SIMPLE_OR_FLOAT: () => (/* binding */ MAJOR_TYPE_SIMPLE_OR_FLOAT),\n/* harmony export */   MAJOR_TYPE_TAG: () => (/* binding */ MAJOR_TYPE_TAG),\n/* harmony export */   MAJOR_TYPE_TEXT_STRING: () => (/* binding */ MAJOR_TYPE_TEXT_STRING),\n/* harmony export */   MAJOR_TYPE_UNSIGNED_INTEGER: () => (/* binding */ MAJOR_TYPE_UNSIGNED_INTEGER),\n/* harmony export */   decodeLength: () => (/* binding */ decodeLength),\n/* harmony export */   encodeLength: () => (/* binding */ encodeLength)\n/* harmony export */ });\nfunction decodeLength(data, argument, index) {\n    if (argument < 24) {\n        return [argument, 1];\n    }\n    const remainingDataLength = data.byteLength - index - 1;\n    const view = new DataView(data.buffer, index + 1);\n    let output;\n    let bytes = 0;\n    switch (argument) {\n        case 24: {\n            if (remainingDataLength > 0) {\n                output = view.getUint8(0);\n                bytes = 2;\n            }\n            break;\n        }\n        case 25: {\n            if (remainingDataLength > 1) {\n                output = view.getUint16(0, false);\n                bytes = 3;\n            }\n            break;\n        }\n        case 26: {\n            if (remainingDataLength > 3) {\n                output = view.getUint32(0, false);\n                bytes = 5;\n            }\n            break;\n        }\n        case 27: {\n            if (remainingDataLength > 7) {\n                const bigOutput = view.getBigUint64(0, false);\n                // Bound it to [24, MAX_SAFE_INTEGER], where it is safe\n                // to encode as a javascript number\n                if (bigOutput >= 24n && bigOutput <= Number.MAX_SAFE_INTEGER) {\n                    return [Number(bigOutput), 9];\n                }\n            }\n            break;\n        }\n    }\n    if (output && output >= 24) {\n        return [output, bytes];\n    }\n    throw new Error(\"Length not supported or not well formed\");\n}\nconst MAJOR_TYPE_UNSIGNED_INTEGER = 0;\nconst MAJOR_TYPE_NEGATIVE_INTEGER = 1;\nconst MAJOR_TYPE_BYTE_STRING = 2;\nconst MAJOR_TYPE_TEXT_STRING = 3;\nconst MAJOR_TYPE_ARRAY = 4;\nconst MAJOR_TYPE_MAP = 5;\nconst MAJOR_TYPE_TAG = 6;\nconst MAJOR_TYPE_SIMPLE_OR_FLOAT = 7;\nfunction encodeLength(major, argument) {\n    const majorEncoded = major << 5;\n    if (argument < 0) {\n        throw new Error(\"CBOR Data Item argument must not be negative\");\n    }\n    // Convert to bigint first.\n    // Encode integers around and above 32 bits in big endian / network byte order\n    // is unreliable in javascript.\n    // https://tc39.es/ecma262/#sec-bitwise-shift-operators\n    // Bit shifting operations result in 32 bit signed numbers\n    let bigintArgument;\n    if (typeof argument == \"number\") {\n        if (!Number.isInteger(argument)) {\n            throw new Error(\"CBOR Data Item argument must be an integer\");\n        }\n        bigintArgument = BigInt(argument);\n    }\n    else {\n        bigintArgument = argument;\n    }\n    // Negative 0 is not a thing\n    if (major == MAJOR_TYPE_NEGATIVE_INTEGER) {\n        if (bigintArgument == 0n) {\n            throw new Error(\"CBOR Data Item argument cannot be zero when negative\");\n        }\n        bigintArgument = bigintArgument - 1n;\n    }\n    if (bigintArgument > 18446744073709551615n) {\n        throw new Error(\"CBOR number out of range\");\n    }\n    // Encode into 64 bits and extract the tail\n    const buffer = new Uint8Array(8);\n    const view = new DataView(buffer.buffer);\n    view.setBigUint64(0, bigintArgument, false);\n    if (bigintArgument <= 23) {\n        return [majorEncoded | buffer[7]];\n    }\n    else if (bigintArgument <= 255) {\n        return [majorEncoded | 24, buffer[7]];\n    }\n    else if (bigintArgument <= 65535) {\n        return [majorEncoded | 25, ...buffer.slice(6)];\n    }\n    else if (bigintArgument <= 4294967295) {\n        return [\n            majorEncoded | 26,\n            ...buffer.slice(4),\n        ];\n    }\n    else {\n        return [\n            majorEncoded | 27,\n            ...buffer,\n        ];\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxldmlzY2h1Y2svdGlueS1jYm9yL2VzbS9jYm9yL2Nib3JfaW50ZXJuYWwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LW5leHRqcy10ZXN0Ly4vbm9kZV9tb2R1bGVzL0BsZXZpc2NodWNrL3RpbnktY2Jvci9lc20vY2Jvci9jYm9yX2ludGVybmFsLmpzP2YyZGIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGRlY29kZUxlbmd0aChkYXRhLCBhcmd1bWVudCwgaW5kZXgpIHtcbiAgICBpZiAoYXJndW1lbnQgPCAyNCkge1xuICAgICAgICByZXR1cm4gW2FyZ3VtZW50LCAxXTtcbiAgICB9XG4gICAgY29uc3QgcmVtYWluaW5nRGF0YUxlbmd0aCA9IGRhdGEuYnl0ZUxlbmd0aCAtIGluZGV4IC0gMTtcbiAgICBjb25zdCB2aWV3ID0gbmV3IERhdGFWaWV3KGRhdGEuYnVmZmVyLCBpbmRleCArIDEpO1xuICAgIGxldCBvdXRwdXQ7XG4gICAgbGV0IGJ5dGVzID0gMDtcbiAgICBzd2l0Y2ggKGFyZ3VtZW50KSB7XG4gICAgICAgIGNhc2UgMjQ6IHtcbiAgICAgICAgICAgIGlmIChyZW1haW5pbmdEYXRhTGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIG91dHB1dCA9IHZpZXcuZ2V0VWludDgoMCk7XG4gICAgICAgICAgICAgICAgYnl0ZXMgPSAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAyNToge1xuICAgICAgICAgICAgaWYgKHJlbWFpbmluZ0RhdGFMZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gdmlldy5nZXRVaW50MTYoMCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIGJ5dGVzID0gMztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMjY6IHtcbiAgICAgICAgICAgIGlmIChyZW1haW5pbmdEYXRhTGVuZ3RoID4gMykge1xuICAgICAgICAgICAgICAgIG91dHB1dCA9IHZpZXcuZ2V0VWludDMyKDAsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBieXRlcyA9IDU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDI3OiB7XG4gICAgICAgICAgICBpZiAocmVtYWluaW5nRGF0YUxlbmd0aCA+IDcpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBiaWdPdXRwdXQgPSB2aWV3LmdldEJpZ1VpbnQ2NCgwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgLy8gQm91bmQgaXQgdG8gWzI0LCBNQVhfU0FGRV9JTlRFR0VSXSwgd2hlcmUgaXQgaXMgc2FmZVxuICAgICAgICAgICAgICAgIC8vIHRvIGVuY29kZSBhcyBhIGphdmFzY3JpcHQgbnVtYmVyXG4gICAgICAgICAgICAgICAgaWYgKGJpZ091dHB1dCA+PSAyNG4gJiYgYmlnT3V0cHV0IDw9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbTnVtYmVyKGJpZ091dHB1dCksIDldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChvdXRwdXQgJiYgb3V0cHV0ID49IDI0KSB7XG4gICAgICAgIHJldHVybiBbb3V0cHV0LCBieXRlc107XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcIkxlbmd0aCBub3Qgc3VwcG9ydGVkIG9yIG5vdCB3ZWxsIGZvcm1lZFwiKTtcbn1cbmV4cG9ydCBjb25zdCBNQUpPUl9UWVBFX1VOU0lHTkVEX0lOVEVHRVIgPSAwO1xuZXhwb3J0IGNvbnN0IE1BSk9SX1RZUEVfTkVHQVRJVkVfSU5URUdFUiA9IDE7XG5leHBvcnQgY29uc3QgTUFKT1JfVFlQRV9CWVRFX1NUUklORyA9IDI7XG5leHBvcnQgY29uc3QgTUFKT1JfVFlQRV9URVhUX1NUUklORyA9IDM7XG5leHBvcnQgY29uc3QgTUFKT1JfVFlQRV9BUlJBWSA9IDQ7XG5leHBvcnQgY29uc3QgTUFKT1JfVFlQRV9NQVAgPSA1O1xuZXhwb3J0IGNvbnN0IE1BSk9SX1RZUEVfVEFHID0gNjtcbmV4cG9ydCBjb25zdCBNQUpPUl9UWVBFX1NJTVBMRV9PUl9GTE9BVCA9IDc7XG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlTGVuZ3RoKG1ham9yLCBhcmd1bWVudCkge1xuICAgIGNvbnN0IG1ham9yRW5jb2RlZCA9IG1ham9yIDw8IDU7XG4gICAgaWYgKGFyZ3VtZW50IDwgMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDQk9SIERhdGEgSXRlbSBhcmd1bWVudCBtdXN0IG5vdCBiZSBuZWdhdGl2ZVwiKTtcbiAgICB9XG4gICAgLy8gQ29udmVydCB0byBiaWdpbnQgZmlyc3QuXG4gICAgLy8gRW5jb2RlIGludGVnZXJzIGFyb3VuZCBhbmQgYWJvdmUgMzIgYml0cyBpbiBiaWcgZW5kaWFuIC8gbmV0d29yayBieXRlIG9yZGVyXG4gICAgLy8gaXMgdW5yZWxpYWJsZSBpbiBqYXZhc2NyaXB0LlxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYml0d2lzZS1zaGlmdC1vcGVyYXRvcnNcbiAgICAvLyBCaXQgc2hpZnRpbmcgb3BlcmF0aW9ucyByZXN1bHQgaW4gMzIgYml0IHNpZ25lZCBudW1iZXJzXG4gICAgbGV0IGJpZ2ludEFyZ3VtZW50O1xuICAgIGlmICh0eXBlb2YgYXJndW1lbnQgPT0gXCJudW1iZXJcIikge1xuICAgICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIoYXJndW1lbnQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDQk9SIERhdGEgSXRlbSBhcmd1bWVudCBtdXN0IGJlIGFuIGludGVnZXJcIik7XG4gICAgICAgIH1cbiAgICAgICAgYmlnaW50QXJndW1lbnQgPSBCaWdJbnQoYXJndW1lbnQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYmlnaW50QXJndW1lbnQgPSBhcmd1bWVudDtcbiAgICB9XG4gICAgLy8gTmVnYXRpdmUgMCBpcyBub3QgYSB0aGluZ1xuICAgIGlmIChtYWpvciA9PSBNQUpPUl9UWVBFX05FR0FUSVZFX0lOVEVHRVIpIHtcbiAgICAgICAgaWYgKGJpZ2ludEFyZ3VtZW50ID09IDBuKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDQk9SIERhdGEgSXRlbSBhcmd1bWVudCBjYW5ub3QgYmUgemVybyB3aGVuIG5lZ2F0aXZlXCIpO1xuICAgICAgICB9XG4gICAgICAgIGJpZ2ludEFyZ3VtZW50ID0gYmlnaW50QXJndW1lbnQgLSAxbjtcbiAgICB9XG4gICAgaWYgKGJpZ2ludEFyZ3VtZW50ID4gMTg0NDY3NDQwNzM3MDk1NTE2MTVuKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNCT1IgbnVtYmVyIG91dCBvZiByYW5nZVwiKTtcbiAgICB9XG4gICAgLy8gRW5jb2RlIGludG8gNjQgYml0cyBhbmQgZXh0cmFjdCB0aGUgdGFpbFxuICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KDgpO1xuICAgIGNvbnN0IHZpZXcgPSBuZXcgRGF0YVZpZXcoYnVmZmVyLmJ1ZmZlcik7XG4gICAgdmlldy5zZXRCaWdVaW50NjQoMCwgYmlnaW50QXJndW1lbnQsIGZhbHNlKTtcbiAgICBpZiAoYmlnaW50QXJndW1lbnQgPD0gMjMpIHtcbiAgICAgICAgcmV0dXJuIFttYWpvckVuY29kZWQgfCBidWZmZXJbN11dO1xuICAgIH1cbiAgICBlbHNlIGlmIChiaWdpbnRBcmd1bWVudCA8PSAyNTUpIHtcbiAgICAgICAgcmV0dXJuIFttYWpvckVuY29kZWQgfCAyNCwgYnVmZmVyWzddXTtcbiAgICB9XG4gICAgZWxzZSBpZiAoYmlnaW50QXJndW1lbnQgPD0gNjU1MzUpIHtcbiAgICAgICAgcmV0dXJuIFttYWpvckVuY29kZWQgfCAyNSwgLi4uYnVmZmVyLnNsaWNlKDYpXTtcbiAgICB9XG4gICAgZWxzZSBpZiAoYmlnaW50QXJndW1lbnQgPD0gNDI5NDk2NzI5NSkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgbWFqb3JFbmNvZGVkIHwgMjYsXG4gICAgICAgICAgICAuLi5idWZmZXIuc2xpY2UoNCksXG4gICAgICAgIF07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgbWFqb3JFbmNvZGVkIHwgMjcsXG4gICAgICAgICAgICAuLi5idWZmZXIsXG4gICAgICAgIF07XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@levischuck/tiny-cbor/esm/cbor/cbor_internal.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@levischuck/tiny-cbor/esm/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@levischuck/tiny-cbor/esm/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CBORTag: () => (/* reexport safe */ _cbor_cbor_js__WEBPACK_IMPORTED_MODULE_0__.CBORTag),\n/* harmony export */   decodeCBOR: () => (/* reexport safe */ _cbor_cbor_js__WEBPACK_IMPORTED_MODULE_0__.decodeCBOR),\n/* harmony export */   decodePartialCBOR: () => (/* reexport safe */ _cbor_cbor_js__WEBPACK_IMPORTED_MODULE_0__.decodePartialCBOR),\n/* harmony export */   encodeCBOR: () => (/* reexport safe */ _cbor_cbor_js__WEBPACK_IMPORTED_MODULE_0__.encodeCBOR)\n/* harmony export */ });\n/* harmony import */ var _cbor_cbor_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cbor/cbor.js */ \"(rsc)/./node_modules/@levischuck/tiny-cbor/esm/cbor/cbor.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxldmlzY2h1Y2svdGlueS1jYm9yL2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFxRiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LW5leHRqcy10ZXN0Ly4vbm9kZV9tb2R1bGVzL0BsZXZpc2NodWNrL3RpbnktY2Jvci9lc20vaW5kZXguanM/ZTk4NSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBDQk9SVGFnLCBkZWNvZGVDQk9SLCBkZWNvZGVQYXJ0aWFsQ0JPUiwgZW5jb2RlQ0JPUiwgfSBmcm9tIFwiLi9jYm9yL2Nib3IuanNcIjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@levischuck/tiny-cbor/esm/index.js\n");

/***/ })

};
;